// Define RSSI values for each gateway
const gatewaysRSSI = {
  ac233fc17756: [
    [
      -44.21248336082697, -44.12631310732068, -42.89167009589996,
      -40.59554220991136, -40.015436336305086, -42.4210287632336,
      -40.63832645328597, -36.89615331881366, -36.89615331881366,
      -37.729341896964726,
    ],
    [
      -45.789767294141804, -48.8721790403917, -48.8721790403917,
      -45.4831538645237, -45.22501763550963, -44.9173314651011,
      -45.99769845554754, -45.516422558695965, -48.05966602653857,
      -48.05966602653857,
    ],
    [
      -50.17745160340467, -50.204804204329555, -47.60554729503955,
      -47.60554729503955, -47.47962604832524, -47.75394523592007,
      -47.96420686251891, -47.12488940697318, -46.84115998348115,
      -47.30126533871207,
    ],
    [
      -49.72614908040948, -49.728514717752425, -49.80840171821078,
      -49.8191065387401, -49.8191065387401, -50.58970093240519,
      -50.58970093240519, -50.51013536027741, -48.40143524385377,
      -48.40143524385377,
    ],
    [
      -52.00625057763077, -51.541983538600654, -53.44104971176668,
      -53.44104971176668, -53.040857907961765, -53.040857907961765,
      -52.282785640442256, -52.785747054721114, -53.305801141090285,
      -52.06020476376141,
    ],
    [
      -51.810883111062, -51.59123694353867, -51.59123694353867,
      -52.25129798204147, -51.735047318004035, -51.735047318004035,
      -52.889953830006995, -52.889953830006995, -55.06877558176113,
      -57.111173384880345,
    ],
  ],
  ac233ffb3adb: [
    [
      -42.139389879352066, -41.044535492780525, -42.23778474912943,
      -42.23778474912943, -42.335705581417145, -41.77911480323925,
      -42.161110879511156, -42.161110879511156, -41.916156890868045,
      -41.916156890868045,
    ],
    [
      -45.29990245417425, -46.301278425277914, -47.033565930742974,
      -47.033565930742974, -45.99623627020782, -45.213139417984124,
      -45.32744831631131, -45.32744831631131, -46.27015731481677,
      -45.15347312071495,
    ],
    [
      -54.433838828095915, -56.42088139830855, -56.42088139830855,
      -55.52759355881557, -55.52759355881557, -55.647406253133184,
      -59.061616597577654, -59.061616597577654, -60.217949258886456,
      -57.14441899512699,
    ],
    [
      -49.77130124715501, -48.355646073482596, -49.98565167310889,
      -49.78892105252993, -49.78892105252993, -49.59226163721607,
      -49.59226163721607, -49.463065163802305, -49.463065163802305,
      -49.76052286255971,
    ],
    [
      -54.895997574670936, -55.36953234656014, -55.091619559731285,
      -55.091619559731285, -54.64212165755672, -54.64212165755672,
      -54.88248870666674, -54.88248870666674, -55.14759515412159,
      -55.14759515412159,
    ],
    [
      -58.53331590695795, -57.64679617156494, -57.64679617156494,
      -58.14948422934829, -58.73433521016078, -59.6191212693097,
      -59.6191212693097, -59.56397724276387, -59.56397724276387,
      -59.6307425796665,
    ],
  ],
  ac233ffb3adc: [
    [
      -50.32515885263861, -50.32515885263861, -50.32515885263861,
      -51.84902429006902, -52.12428056371228, -51.03410384204527,
      -51.03410384204527, -50.96747357226896, -52.660974159431284,
      -50.821284129630044,
    ],
    [
      -56.62732753448479, -56.0383159821565, -56.15728648554601,
      -56.09281777726261, -58.34564698421659, -56.89365897216548,
      -56.89365897216548, -55.7913715799677, -57.19196998761056,
      -57.07357053984398,
    ],
    [
      -55.06584445489799, -56.37043367018221, -55.22880530410381,
      -59.216904472148585, -59.0611508945165, -56.33159364296446,
      -58.405565975742924, -60.826148740267115, -60.826148740267115,
      -58.97990427620668,
    ],
    [
      -55.55948696406989, -58.300735504343166, -58.00360630172982,
      -55.28026306275838, -55.825202457449585, -54.43620531032515,
      -55.392709225695924, -55.362339214952456, -55.30373164614023,
      -57.911646951987485,
    ],
    [
      -53.41648129252616, -54.82590411334824, -53.246048562744576,
      -53.02668480099883, -53.96804519334874, -54.189830705249356,
      -53.93824126147763, -51.32904813844972, -54.079695976758195,
      -53.52440977186872,
    ],
    [
      -53.81656086706842, -55.81017859391634, -55.78640177971967,
      -57.45819461703657, -56.24320249077225, -54.5355083490435,
      -55.52649289605821, -55.40088115173162, -54.01815620976388,
      -54.585131118784226,
    ],
  ],
};

// Define distances for the RSSI values
const distances = [1, 2, 3, 4, 5, 6];

// Function to calculate the average RSSI and estimate the path loss exponent
function calculatePathLoss(gatewayId) {
  const rssi_values_angles = gatewaysRSSI[gatewayId];

  // Calculate average RSSI for each distance
  const average_rssi_values = rssi_values_angles.map(
    (arr) => arr.reduce((a, b) => a + b) / arr.length
  );

  // Calculate log10 of distances
  const log_distances = distances.map((distance) => Math.log10(distance));

  // Perform linear regression using least squares
  function linearRegression(x, y) {
    let n = x.length;
    let sumX = x.reduce((a, b) => a + b, 0);
    let sumY = y.reduce((a, b) => a + b, 0);
    let sumXY = x.map((xi, i) => xi * y[i]).reduce((a, b) => a + b, 0);
    let sumX2 = x.map((xi) => xi * xi).reduce((a, b) => a + b, 0);

    let slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
    let intercept = (sumY - slope * sumX) / n;

    return { slope, intercept };
  }

  const { slope, intercept } = linearRegression(
    log_distances,
    average_rssi_values
  );

  // Calculate the path loss exponent n
  const n = -slope / 10;

  //console.log(
  //  `Gateway ${gatewayId} - RSSI0 (Intercept): ${intercept.toFixed(2)} dBm`
  //);
  //console.log(`Gateway ${gatewayId} - Path Loss Exponent (n): ${n.toFixed(2)}`);

  return { rssi0: intercept, pathLossExponent: n };
}

// Function to estimate the distance based on measured RSSI for a specific gateway
function estimateDistanceForGateway(gatewayId, rssiMeasured) {
  const { rssi0, pathLossExponent } = calculatePathLoss(gatewayId);

  // Using the rearranged path loss model formula
  return Math.pow(10, (rssi0 - rssiMeasured) / (10 * pathLossExponent));
}

// pathLossModel.js
function calculatePathLossExponent(rssiValues, distances) {
  // Implement the path loss calculation logic here.
  // Example: Use log-distance path loss model
  // n = (RSSI0 - RSSI) / (10 * log10(d))

  const rssi0 = rssiValues[0]; // Assuming the RSSI at 1 meter is the first value
  const n = rssiValues.map((rssi, i) => {
    return (rssi0 - rssi) / (10 * Math.log10(distances[i]));
  });

  // Returning average path loss exponent (n)
  const averageN = n.reduce((acc, value) => acc + value, 0) / n.length;
  return averageN;
}

module.exports = { estimateDistanceForGateway, calculatePathLossExponent };
